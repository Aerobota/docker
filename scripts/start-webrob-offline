#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd $DIR

# TODO(daniel): Run fake DNS in docker container to avoid `sudo` here.
# TODO(daniel): resolv.conf of dockerbridge!!!!

echo "Starting openEASE in offline mode currently requires a local DNS server, "\
    "and the DNS server requires root rights, using 'sudo' to start the DNS server now..."
# make sure sudo remembers password
sudo echo ""

# Check if dnsmasq is running kill it if this is the case
echo "Checking for dnsmasq blocking the DNS port...."
DNSMNASQ=`sudo netstat -anlp | grep -w LISTEN | grep dnsmasq`
if [ "X$DNSMNASQ" == "X" ]; then
    echo "    dnsmasq is not running."
else
    echo "    dnsmasq is running and blocking the DNS port, have to kill it using 'sudo killall dnsmasq'"
    sudo killall dnsmasq
fi
echo ""

# Make sure fake DNS is started
echo "Checking if fake DNS is already running...."
FAKE_DNS=`ps -A | grep start-dns-dummy`
if [ "X$FAKE_DNS" == "X" ]; then
    sudo ./start-dns-dummy &
    echo "    Fake DNS server started."
else
    echo "    Fake DNS server already running."
fi
echo "NOTE: Stop the DNS server using 'sudo killall start-dns-dummy'"
echo ""

echo "Starting the webapp...."
./start-webrob &

echo "Rewriting resolv.conf...."
write_resolv_conf () {
    while [ Y"$X" = Y"" ]; do
        RESOLV_PATH=`docker inspect --format="{{ .ResolvConfPath }}" dockerbridge 2>/dev/null`
        if [ $? -eq 0 ]; then
            sudo bash -c "echo 'nameserver 127.0.0.1' > $RESOLV_PATH"
            echo "    resolv.conf written!"
            break
        fi
        sleep 1
    done
}
write_resolv_conf &
echo ""

for job in `jobs -p`
do
    wait $job
done
