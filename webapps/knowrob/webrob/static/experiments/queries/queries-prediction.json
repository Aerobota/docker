{
    "query": [
        {
            "q": "",
            "text": "----- init -----"
        },
        {
            "q": "mng_db('prediction').",
            "text": "Select experiment database"
        },
        {
            "q": "load_experiment('/home/ros/knowrob_data/logs/robots/cram/prediction/cram_log.owl').",
            "text": "Load exploration prediction experiment from 'knowrob_data' library"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the semantic map -----"
        },
        {
            "q": "owl_parse('package://iai_semantic_maps/owl/room.owl').",
            "text": "Load semantic map"
        },
        {
            "q": "owl_individual_of(A, knowrob:'SemanticEnvironmentMap'), !, add_object_with_children(A).",
            "text": "Visualize semantic map"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Queries on the robot's logged belief state -----"
        },
        {
            "q": "owl_parse('package://knowrob_srdl/owl/PR2.owl').",
            "text": "Load PR2 robot model"
        },
        {
            "q": "task(T), task_goal(T, '(OBJECT-PLACED-AT ?OBJ ?LOC)'), task_start(T, S), task_end(T, E), add_trajectory('/base_link', S, E, 0.5).",
            "text": "Which path did the PR2 follow during the exploration task?"
        },
        {
            "q": "remove_object_with_children(pr2:'PR2Robot1').",
            "text": "Stop publishing PR2 markers"
        },
        {
            "q": "remove_trajectory('/base_link'), \n remove_trajectory('/l_wrist_roll_link'), \n remove_trajectory('/r_wrist_roll_link').",
            "text": "Stop publishing trajectory markers"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Prediction Related Queries -----"
        },
        {
            "q": "aggregate_all(count, rdf_has(Task, rdf:type, knowrob:'FindingObjects'), Count).",
            "text": "Count instances of object finding tasks"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), not((subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', Obj)))).",
            "text": "Object finding tasks that failed due to no object being found"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', Obj)).",
            "text": "Object finding tasks that succeeded"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', Obj)), owl_has(SubtaskPerceive, knowrob:'perceptionRequest', RequestDesig), mng_designator_props(RequestDesig, 'TYPE', 'PANCAKEMIX').",
            "text": "Trying to find the pancake mix and succeeding"
        },
        {
            "q": "rdf_has(Task, rdf:type, knowrob:'FindingObjects'), subtask_all(Task, SubtaskPerceive), rdf_has(SubtaskPerceive, rdf:type, knowrob:'UIMAPerception'), not(once(owl_has(SubtaskPerceive, knowrob:'perceptionResult', Obj))), owl_has(SubtaskPerceive, knowrob:'perceptionRequest', RequestDesig), mng_designator_props(RequestDesig, 'TYPE', 'COFFEE').",
            "text": "Trying to find the coffee and failing"
        },
        {
            "q": "",
            "text": ""
        },
        {
            "q": "",
            "text": "----- Statistics -----"
        },
        {
            "q": "diagram_canvas.",
            "text": "Initialize diagram canvas"
        },
        {
            "q": "findall(Type-Num, (owl_subclass_of(T, knowrob:'CRAMFailure'),\n rdf_split_url(_, Type, T),findall(F, failure_type(F, T), Failures),\n length(Failures, Num)), Distrib),pairs_keys_values(Distrib, Types, Nums),\n add_diagram(errordist, 'Error distribution', piechart, xlabel, ylabel, 350, 350, '11px', [[Types, Nums]]).",
            "text": "Show occurences of typical error types in the chart"
        }
    ]
}
